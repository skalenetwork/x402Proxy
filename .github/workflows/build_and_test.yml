name: Build and test proxy

on:
  push:
    branches: [ develop ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Bootstrap vcpkg
        run: |
          ./external/vcpkg/bootstrap-vcpkg.sh
          echo "$PWD/external/vcpkg" >> "$GITHUB_PATH"

      # Restore vcpkg cache (keyed to manifests so it updates when deps change)
      - name: Restore vcpkg cache
        id: vcpkg-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/vcpkg
            external/vcpkg/installed
            external/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '**/vcpkg-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg packages
        env:
          VCPKG_FEATURE_FLAGS: manifests
        run: |
          vcpkg install

      - name: Configure (CMake)
        env:
          VCPKG_FEATURE_FLAGS: manifests
        run: |
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_TOOLCHAIN_FILE=external/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_FEATURE_FLAGS=manifests

      - name: Build
        run: cmake --build build --config Debug -j 2

      # Save cache only if we didn't hit it (prevents save conflicts)
      - name: Save vcpkg cache
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cache/vcpkg
            external/vcpkg/installed
            external/vcpkg/downloads
          key: ${{ steps.vcpkg-cache.outputs.cache-primary-key }}

      # Optional: run tests if you have them
      # - name: Test
      #   run: ctest --test-dir build --output-on-failure

